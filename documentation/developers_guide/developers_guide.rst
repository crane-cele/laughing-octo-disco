HANDE Developers' Guide
=======================

Compiled from various email threads on (and before) the nascent hande-dev list.  December 2013

Precepts
--------

* All development happens in branches.
* Branches belong to a relevant namespace (feature/XXX indicates XXX is
  a branch (name) for a new feature, he/XXX for a HANDE enhancement
  (he), bug_fix/XXX for a bug fix, config/XXX for a new config file,
  etc).
* Branches are merged into master after review.  Merging between
  development branches should be avoided.
* Branches should be reviewed by one other person (at least) before
  merging into master.
* To review, send a pull request email (see git request-pull) to all
  developers (perhaps including a summary of work in the branch, which
  is not generated by request-pull!).  This should be viewed as starting
  a conversation on the work.
* Make changes prompted by the review and resend the pull request.  (This
  might take a few iterations.)
* After a happy conclusion to the review, merge into master.

Notes:

* We would like each commit to at least compile but don't expect each
  commit to be perfect in its own right!
* New functionality should be incorporated by new tests.  I intend to
  spend a day soon creating new tests and checking the code coverage
  (lcov is a wonderful tool) of the test suite.

Workflow for generating a pull request is below

See http://nvie.com/posts/a-successful-git-branching-model/ for
a popular variant on this approach.

I hope that this approach will lead to better code and also (with
a little work) everyone will be more familiar/comfortable with the code
that they're not directly working on themselves.

Some questions:

* Is it ever ok to commit directly to master?
 Yes, but only under very restricted circumstances!  If in doubt make a branch and let someone else do the merge.

 - I've got a quick bugfix which I've tested - can I commit it to master?
    Well done on the testing.  A bugfix should go in a bugfix/XXX branch.  It's a single command to create this.
    Another few commands and you'll have an pull request email to the hande-dev list for review.
    + But it's a really quick fix!  Surely it won't hurt?
      If it will affect functionality (and potentially someone else's jobs) then it probably ought to be reviewed!
      If it's a very minor corner case of which you're certain, then commit to a bugfix branch and then do the merge yourself.
      Always do this via a branch - don't commit directly to master.
      It's sensible to ask the original author if you're fixing their code however.
    + But I need to use this fix to make my runs work.
      You can always run from a bugfix branch.  Because you've committed it to the central git repository, you'll
         have access to it everywhere.
    + What if I need this bugfix to develop a new feature?
      I don't know.  Ask JSS!

 - I've added some comments to clear up something.
     This might be ok to commit to master.  If you designed the feature/documentation then you're effectively reviewing yourself.
     If it's somebody else's code it's polite to have consulted someone on this (either by email, or a review branch).

 - I've modified a feature that only I'm using.
     It sounds like this should be in an enhancement branch he/XXX.  If only you're using it it's even more important than someone
       else review it.
 
 - I've accidentally committed some changes to my local master.  What do I do?
     Remember that you can always push to a different branch on the main server.
      git push origin master:he/XXX
     would push your changes to the he/XXX branch.  It's probably better, however to checkout your changes locally to a branch, and
     then roll back your master, and then commit the branch.
      JSS to provide git magic! 

* I've got a local branch which I've been working on for some time, but I don't want the pain of a large merge at the end.
   - This sounds like a workflow problem.  Some comments on this:
     + We need to lose the idea of personal branches (note the branch namespace
       is organised by topic rather than person), even though a branch might be
       written entirely/mostly by one person.  In that sense, long-running
       development work should be split into small, logical chunks, each of
       which is attached one-at-a-time in its own branch.  I have always
       regretted having (multiple) long-running branches. 
     + When wrenched away from a WIP with only a distant prospect of future free time, a commit and push with light notes is a very worthwhile thing.
       It's probably even worthwhile committing a plan before committing any actual code. 
       If these are fast and flexible enough they will hopefully not discourage, but actually encourage organization.
     + Agree.  It might also encourage (*gasp*) collaboration.  Perhaps
       a directory in documentation as a place for such notes/roadmaps,
       somewhere between Python's PEP system and informal topic-based TODO
       lists?
       I should also say: I am pretty happy with development branches being
       regularly rebased against master (*note*: not merged in either
       direction), to lessen the pain of one final merge between two very
       disparate branches.

   - This is all very well (and I enjoy the Socratic method), but I'm stuck with a huge branch I don't have time to merge.  What do I do?
     Commit it as a feature/XXX or he/XXX and ask for help from the dev list.


* How do I review code?
  We're working on a workflow for this.  One method is to make a branch (if you're not already in one) and just add comments to the source.
  It's helpful if the review is part of the git history (even if the comments never actually make it to the master).

* Will *my* code actually get reviewed?
   We're all usually terribly busy and have very little time, but in a group effort a little from each person goes a long way.
   If you review others' code then they're more likely to review yours.  Make it easy to review, by keeping it clean and the features short.
   Remember, this kind of review is far more lightweight than peer review of publications, and should be able to slot into people's 'free' time.
   (Each branch is far more lightweight than a paper.) 
   A simple pull-request should be enough to get people to review.
   This is rather intricately tied in with the idea of project management. Prodding/cajoling/bullying emails are all possible to aid the review

* What happens if no-one replies to the pull request?
  Here are some opinions:
  - I suggest that
    after an agreed upon time (X working days?) without even a "I'll
    review but am too busy until next week" reply, the author is free to
    merge it into master (but should be open to fixes/improvements to that
    work that others subsequently suggest).
  - Having been burdened with years-long old dirty branches from other projects, merging is certainly vital.
    I don't think lack of review should stop merging, but it should prompt someone to ask why.
  - I would view it as a sign that the work is stable and relatively
    complete (for the time being) and is ready to be used by others/in
    production calculations.

* What about major (long-term) development work?  Perhaps anyone engaged
  in major projects should send out 'pull-requests' to request review of
  ongoing work periodically?
   Yes.

* Why are we bothering with review?  Surely it makes life more difficult?
   - Presumably avoiding 1) heaps of completely redundant code, 2) heaps of untested code, 3) heaps of buggy code ending up in master?
      + Yes to all and also (mainly) to encourage something resembling
         a coherent design and prevent someone going off in a (technical)
         direction others don't agree with/can see major problems with.  A big
         plus is that it helps everyone become familiar with code that they
         didn't write (which is why doing code review is good for newcomers). 
   - Presumably PhDs are going to be working on this. How do you see the work they produce on a single project over the course of 3 years going? How often should their code be subject to review?
      + PhDs are never one single project (or at least shouldn't be!).  The
         amount and frequency of review is probably a function of how experienced
         a developer is (in general and with HANDE).

* How will one signify a 'fine - no need to comment' review?
   I would suggest a pull request to the email list followed immediately by
   an email announcing that the requester had also merged into master (or
   perhaps just the latter email).

How to generate a pull request
------------------------------

After pushing the commit to the relevant branch on the svn sever:

git request-pull commit-hash origin

Where commit-hash is the commit you want the person to review the changes from. Not the hash of the commit you have just made.  origin is the remote configured to the git sever.

Usually the branch would have been created from master, in which case
you can simply do (even if master has been committed to since the branch
was created):

$ git request-pull master origin

For example:

wv111@ch-wv111:~/Desktop/tmp/hubbard_fciqmc$ git request-pull 7a58a8d1a8f2e8af15df1c9946e7596078649d79 origin
The following changes since commit 7a58a8d1a8f2e8af15df1c9946e7596078649d79:

  Updated the config files for cx2. (2013-12-09 11:07:52 +0000)

are available in the git repository at:

  git@tyc-svn.cmth.ph.ic.ac.uk:hubbard_fciqmc config/cx2

for you to fetch changes up to 1a5522648378f406d3e5fbd87e22e3768da490bc:

  Fixed typo cx2 config comment (2013-12-13 14:35:42 +0000)

----------------------------------------------------------------
William Vigor (1):
      Fixed typo cx2 config comment

 config/cx2 |    2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

I then copy and paste this text from the terminal into the email program and send the pull request to the relevant person. I use the subject pull request.
If you think this is rather crude you could pipe this into an email program of your choice, I haven't bothered to do this because I don't send out that many pull requests.

If your mail client/workstation/sendmail/exim4 is set up properly
(naturally the CMTH ones are) then

$ git request-pull master origin | mail -s "Pull request" hande-dev@imperial.ac.uk

works as one would expect. 
